// This is your Prisma schema file for the social media app
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ============================================
// User Model
// ============================================
// Represents a user in the social media app
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // Hashed password for credentials auth
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js required fields (optional for JWT strategy)
  accounts      Account[]
  sessions      Session[]

  // Social media relations
  posts         Post[]    // Posts created by this user
  likes         Like[]    // Likes made by this user
  followers     Follow[]  @relation("UserFollowers")  // Users following this user
  following     Follow[]  @relation("UserFollowing")  // Users this user is following

  @@index([email])
}

// ============================================
// Post Model
// ============================================
// Represents a post/status update in the social media app
model Post {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  
  @@index([userId])
  @@index([createdAt])
}

// ============================================
// Like Model
// ============================================
// Represents a like on a post
model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Ensure a user can only like a post once
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

// ============================================
// Follow Model
// ============================================
// Represents a follow relationship between two users
model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // The user who is following
  followerId  String
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  
  // The user being followed
  followingId String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  // Ensure a user can only follow another user once
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// ============================================
// NextAuth.js Models
// ============================================
// These models are required for NextAuth.js to work properly

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
